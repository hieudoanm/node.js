
access_log logs/access.log combined;

pid /var/www/nginx.pid;

worker_processes 2;
# worker_processes auto;

# load_module modules/<module>;

events {
    worker_connections 512;
    # max connections = worker_connections x worker_processes
}

http {
    include mime.types;

    # Hide nginx version
    server_tokens off;

    # limit_req_zone $binary_remote_addr;
    # Limit 60 requests per minute
    limit_req_zone $request_uri zone=MYZONE:10m rate=60r/m;

    # Turn on gzip
    gzip on;
    # The higher the number, the smaller the file, the more the resource
    gzip_comp_level 1;
    gzip_types text/html text/css text/javascript;

    # Configure microcache
    fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=MYCACHE:100m inactive=60m;
    # https://GETexample.com/blog/article
    fastcgi_cache_key "$scheme$request_method$host$request_uri"
    # Check source comes from cache or not
    add_header X-Cache $upstream_cache_status;

    # Buffering - NGINX worker read data to memory
    # POT submissions
    client_body_buffer_size 8k|16k;
    # Prevent user from sending big request body
    client_max_body_size 1m;
    # Buffer size for Headers
    client_header_buffer_size 1k;

    # Timout- Time limit for a request
    client_body_timeout 60s;
    client_header_timeout 60s;
    # Max time to keep a connection open for
    keepalive_timeout 75s;
    # send response anyway
    send_timeout 60s;

    # Do not use buffers
    sendfile off;
    # optimize send file
    tcp_nopush off;

    types {
        text/html html;
        text/css css;
    }

    upstream servers {
        # ip_hash; Sticky Session
        # least_conn; Server with least connection
        server localhost:10001;
        server localhost:10002;
        server localhost:10003;
    };

    server {
        listen 80;
        listen [::]:80;

        server_name example.com *.example.com 192.168.1.1;

        root /var/www/example.com/html;
        index index.php index.html index.htm index.nginx-debian.html;

        # Since it is in root, it overrides everything
        try_files $uri /greet @not_found;

        # Cache by default
        set $no_cache 0;

        if ( $arg_skipcache = 1 ) {
            set $no_cache 1;
        }

        location / {
            try_files $uri $uri/ =404;
        }

        location ~/.php$ {
            include fastcgi.conf;
            fastcgi_pass unix:/run/php.sock;

            fastcgi_cache MYCACHE;
            fastcgi_cache_valid 200 60m;
            fastcgi_cache_bypass $no_cache;
            fastcgi_no_cache $no_cache;
        }

        set $weekend "No";
        if ( $date_local ~ "Saturday|Sunday" ) {
            set $weekend "Yes";
        }

        if ( $arg_apikey != 1234 ) {
            return 401 "Invalid API Key!";
        }

        location @not_found {
            return 404 "Not Found"
        }

        # 01 - Exact match
        location = /greet {
            return 200 "Hello World from NGINX - EXACT!";
        }

        # 02 - Preferential Prefix match
        location ^~ /greet {
            return 200 "Hello World from NGINX - PREFIX!";
        }

        # 03 - REGEX match - case insensitive (*)
        location ~* /greet[0-9] {
            return 200 "Hello World from NGINX - REGEX!";
        }

        # 04 - Prefix match
        location /greet {
            return 200 "Hello World from NGINX - PREFIX!";
        }

        # Native variables
        location = /inspect {
            return 200 "$host\n$uri\n$args";
        }

        # Rewrite - needs more resource since it checks the configs again
        rewrite ^/user/(\w+) /greet/$1 last;

        # Redirect
        location = /logo {
            return 307 /icon.png;
        }

        # Cache Header
        location = /icon.png {
            add_header my_header "Header";
            add_header Cacge-Control public;
            add_header Pragma public;
            add_header Vary Accept-Encoding;
            # Expires in 60 minutes
            expires 60m;
            return 200 /icon.png;
        }

        # Access Logs
        location = /secure {
            access_log off;
            return 200 "Hello World from Secure";
        }

        # Reverse Proxy
        location = /nginx {
            add_header proxied nginx;
            # proxy_set_header Host ;proxy_set_header Connection close;
            proxy_pass https://nginx.com/;
        }

        # Load Balancer (basic)
        location = /load_balancer {
            proxy_pass http://servers;
        }
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name example.com *.example.com 192.168.1.1;
        return 301 https://$host$request_uri;
    }

    server {
        # Remember to install http2 module
        listen 433 ssl http2;

        server_name example.com *.example.com 192.168.1.1;

        ssl_certificate /etc/nginx/ssl/self.crt;
        ssl_certificate_key /etc/nginx/ssl/self.key;

        index index.php index.html;

        # Disable CORS
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection 1;

        # Disable SSL
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        # Optimize cipher suits
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Enable DH Params
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        # Enable HSTS
        add_header Strict-Transport-Security "max-age=31536000" always;

        # SSL Sessions
        ssl_session_cache shared:SSL:40m;
        ssl_session_timeout 5m;
        ssl_session_tickets on;d

        location = /index.html {
            http2_push /style.css;
            http2_push /script.js;
        }

        location / {
            # limit_req zone=MYZONE burst=5 nodelay;
            auth_basic "Secure Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            try_files $uri $uri/ =404;
        }
    }
}
